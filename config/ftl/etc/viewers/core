# preview and external viewer for ftl

source "$FTL_CFG/etc/commands/open_with"

user_eviewers() { false ; }
user_pviewers() { false ; }

ext_viewers()
{
user_eviewers && return ;

[[ -d "$n"                  ]] && { ext_dir   ; return ; }
[[ $e =~ html               ]] && { ext_html  ; return ; }
[[ $e =~ svg                ]] && { ext_svg   ; return ; }
[[ $e =~ $ifilter           ]] && { ext_image ; return ; }
[[ $e == mp3                ]] && { ext_mp3   ; return ; }
[[ $e =~ $mfilter           ]] && { ext_media ; return ; }
[[ $e == pdf || $e == PDF   ]] && { ext_pdf   ; return ; }
[[ $e == sc                 ]] && { ext_scim  ; return ; }
[[ $e =~ ^md|MD$            ]] && { pmd       ; return ; }
[[ $e == epub               ]] && { return ; }
[[ $e =~ ^json|yml$         ]] && [[ -s "$n" ]] && { ext_json ; return ; }

((emode == 3)) && { open_with ; return ; }

mime_get

[[ $mtype =~ ^text ]] && [[ -s "$n" ]] && { ext_text ; return ; }

open_with
}

pviewers()
{
((${#vfiles[@]} || ${#vdirs[@]})) && { vfile_prev && return ; } 

user_pviewers && return ;

[[ $e                       ]] && ((pignore["${e@Q}"])) && { pignore   ; return ; }
[[ -e "$fs/lock_preview/$n" ]] && { plock     ; return ; }
[[ "${pdir_only[tab]}"      ]] && { [[ -d "$n" ]] || { tcpreview ; return ; } ; }

[[ $e == cbr                ]]                && { pcbr      ; return ; }
[[ $e == cbz                ]]                && { pcbz      ; return ; }
[[ $e == html               ]]                && { phtml     ; return ; }
[[ $e == svg                ]]                && { psvg      ; return ; }
[[ $e == gif                ]]                && { pgif      ; return ; }
[[ $e =~ $ifilter           ]]                && { pimage    ; return ; }
[[ $e == mp3                ]]                && { pmp3      ; return ; }
[[ $e =~ $mfilter           ]]                && { pmedia    ; return ; }
[[ $e =~ ^md|MD$            ]]                && { pmd       ; return ; }
[[ $e == pdf || $e == PDF   ]]                && { ppdf      ; return ; }
[[ $e == epub               ]]                && { pepub     ; return ; }
[[ $e == 1                  ]]                && { pman      ; return ; }
[[ $e == zip                ]] && ((extmode)) && { pcomp     ; return ; }
[[ $e == rar                ]] && ((extmode)) && { pcomp     ; return ; }
[[ $f =~ \.tar$             ]] && ((extmode)) && { pcomp     ; return ; }
[[ $f =~ \.tar\.gz$         ]] && ((extmode)) && { pcomp     ; return ; }
[[ $f =~ \.tar\.bz2$        ]] && ((extmode)) && { pcomp     ; return ; }
[[ -p "$n"                  ]]                && { ppipe     ; return ; }
[[ $e =~ json               ]]                && { pjson     ; return ; }
[[ $e =~ yml                ]]                && { ptext     ; return ; }
[[ $e == sc                 ]]                && { pscim     ; return ; }
[[ $e =~ ^asciio$           ]]                && { pasciio   ; return ; }
[[ -d "$n"                  ]]                && { pdir      ; return ; }

mime_get ; is_bin "$n" ; file_b="$(file -b "$n")"

[[ $mtype =~ ^application/x-perl$ ]] && { ptext  ; return ; }

[[ -s "$n" ]] && [[ "$file_b" =~ "escape sequence" ]] && { pansi ; return ; }

# application/x-perl
# Perl script text executable
((! is_bin)) && [[ -s "$n" ]] && [[ "$file_b" =~ Unicode|ASCII || $mtype =~ ^text ]] && { ptext && return ; }

ptype
}

ext_dir()   {  $G_PLAYER "$n" &>/dev/null & }
ext_html()  { ((emode == 1)) && { tcpreview ; w3m -o confirm_qq=0 "$n" ; } || { (qutebrowser "$n" 2>&- &) ; } ; }
ext_svg()   { run_maxed mupdf "$($pgen/svg_to_pdf "$n" "$thumbs/svg")" ; }
ext_image() { images=() ; for img in "${files[@]}" ; do [[ "$img" =~ $ifilter ]] && images+=("$img") ; done ; $SXIV -b -q -o -f $n "${images[@]}" ; }
ext_mp3()   { ((emode == 1)) && { player_k ; tcpreview ; $TE_PLAYER "${selection[@]}" ; true ; } || ($G_PLAYER "${selection[@]}" &>/dev/null &) ; mplayer=$! ; }
ext_media() { ((emode == 1)) && { player_k ; $T_PLAYER "$n" </dev/null &>/dev/null & } || ($G_PLAYER "${selection[@]}" &>/dev/null &) ; mplayer=$! ; }
ext_pdf()   { ((emode == 1)) && { ((pdf_prev_image)) && run_maxed mupdf "$n" || ext_pdf_vi ; } || { ((emode == 3)) && run_maxed mupdf "$n" ; } || { mupdf "$n" 2>/dev/null & } ; }
ext_pdf_vi(){ edit "$($pgen/pdf "$n" $thumbs/pdf 1)" ; }
ext_text()  { tcpreview ; tsplit "$EDITOR ${selection[@]@Q}" "33%" '-h -b' -R ; pane_id= ; }
ext_json()  { tcpreview ; $JSON_VIEWER "$n" ; }
ext_scim()  { tcpreview ; exec 2>&9 ; scim ${n@Q} ; exec 2>"$fs/log" ; alt_screen ; }

pignore()   { in_pdir= ; in_viprev= ; ptype ; }
plock()     { vipreview "$fs/lock_preview/$n" ; }
ptype()     { mime_get ; psplit "echo ${f@Q} | lscolors ; echo 'mime type: $mtype' ; echo -n 'file type: '; file -b ${n@Q} ; stat -c %s ${n@Q} | numfmt --to=iec ; read -sn 100" ; }

pcbr()      { t="$($pgen/cbr "$n" "$thumbs/cbr" '' ONE)" ; [[ -e "$t" ]] && { pw3image "$t" ; true ; } || ptype ; }
pcbz()      { t="$($pgen/cbz "$n" "$thumbs/cbz" '' ONE)" ; [[ -e "$t" ]] && { pw3image "$t" ; true ; } || ptype ; }

pdir()      { pdirv=(pdir_ftl pdir_du pdir_ls pdir_rmd pdir_exa pdir_image) ; (( extmode != 0 )) && { [[ "${pdirv[$extmode]}" ]] && ${pdirv[$extmode]} ; } || pdir_def ; }
pdir_def()  { echo "${ofs:-$fs}" >$fsp/fs ; [[ "${pdirv[$dirmode]}" ]] && ${pdirv[$dirmode]} || pdir_ftl ; }

pdir_du()   { psplit "$NCDU \"$n\" ; read -sn 1000" ; true ; }
pdir_ls()   { psplit "ls -lh --group-directories-first --color=always \"$n\" ; read -sn 10" ; true ; }
pdir_rmd()  { for m in "README.md" "README" ; do [[ -f "$n/$m" ]] && pmd "$n/$m" && break ; done ; }
pdir_exa()  { psplit "EXA_COLORS='$EXA_COLORS' exa "$n" $EXA_OPTIONS | $PAGER" ; true ; }
pdir_image(){ in_pdir= ; m="$ftl_root/montage/$n/montage.jpg" ; [[ -e "$m" ]] || { header '' "$msg_m" ; "$pgen/montage" "$ftl_root" "$n" ; header '' "$head" ; } ; pw3image "$m" ; true ; }
pdir_ftl()  { ((in_pdir)) && [[ $pane_id ]] && { tmux send -t $pane_id 'Ã…' ; } || { tmux selectp -t $my_pane ; psplit "ftl ${n@Q} $pfs 1" ; in_pdir=1 ; } ; true ; }

ppipe()     { psplit "echo \"fifo (named pipe)\"; read -sn 100" ; }

phtml()     { vipreview "$($pgen/html "$n" "$thumbs/html")" ; }
pimage()    { ((extmode)) && { psplit "exiftool ${n@Q} | piper '^.*?:' blue | $MD_PAGER ; read -sn1" ; geo_winch ; } || pw3image "$n" ; }
psvg()      { pw3image "$($pgen/svg "$n" "$thumbs/svg")" ; }
pgif()      { pw3image "$($pgen/gif "$n" "$thumbs/gif")" ; }

pmp3()      { pmlive || { t="$($pgen/$e "$n" "$thumbs/$e")" ; psplit "$PAGER_ANSI ${t@Q} ; read -sn1" ; } ; }
pmedia()    { pmlive || { t="$($pgen/$e "$n" "$thumbs/$e" '' ONE)" ; [[ -e "$t" ]] && { pw3image "$t" ; true ; } || ptype ; } ; }
pmlive()    { ((extmode)) && { player_k ; t="$($pgen/$e "$n" "$thumbs/$e")" ; psplit "cat ${t@Q} ; $T_PLAYER_STATUS ${n@Q}" ; true ; } ; }

pmd()       { md="${1:-$n}" ; ((extmode==1)) && psplit "$MD_RENDER1 \"$md\" | $MD_PAGER" || { ((extmode==2)) && psplit "$MD_RENDER2 \"$md\" | $MD_PAGER" ; } || $MD_RENDER0 \"$md\" ;  }
ptext()     { vipreview "$n" ; }
pansi()     { ((!extmode)) && psplit "$PAGER \"$n\"" || { ((extmode==1)) && psplit "$EDITOR -R ${n@Q} -c AnsiEsc -c 'set nospell'" || psplit "ansi_show ${n@Q} | $PAGER " ; } ; }

pjson()     { psplit "$JSON_VIEWER \"$n\" ; read -sn100" ; }

ppdf()      { (( extmode==2 || pdf_prev_image)) && ppdfpng || { vipreview "$($pgen/pdf "$n" $thumbs/pdf "$extmode")" ; } ; }
ppdfpng()   { t="$thumbs/$e/et_$(head -c50000 "$n" | md5sum | cut -f1 -d' ').png" ; [[ -f "$t" ]] || { mutool draw -o "$t" "$n" 1 2>/dev/null ; } ; pw3image "$t" ; true ; }

pepub()     { (( extmode==2 || pdf_prev_image)) && pepubpng || { vipreview "$($pgen/epub "$n" $thumbs/epub "$extmode")" ; } ; }
pepubpng()  { t="$thumbs/$e/et_$(head -c50000 "$n" | md5sum | cut -f1 -d' ').png" ; [[ -f "$t" ]] || { mutool draw -o "$t" "$n" 1 2>/dev/null ; } ; pw3image "$t" ; true ; }

pman()      { psplit "man \"$n\" ; read -sn 1000" ; true ; }

pscim()     { psplit "scim \"$n\" | $PAGER ; read -sn100" ; }
pasciio()   { psplit "asciio_to_text \"$n\" | $PAGER ; read -sn100" ; }

pcomp()     
{
  [[ $e == zip         ]] && _pcomp unzip -l                            || 
{ [[ $e == rar         ]] && _pcomp unrar list ;                      } || 
{ [[ $f =~ \.tar$      ]] && _pcomp tar --list         --verbose -f ; } ||
{ [[ $f =~ \.tar\.gz$  ]] && _pcomp tar --gzip  --list --verbose -f ; } ||
{ [[ $f =~ \.tar\.bz2$ ]] && _pcomp tar --bzip2 --list --verbose -f ; }
}

_pcomp()    { ((extmode)) && { fp="$fs/$f.txt" ; [[ -e "$fp" ]] || timeout 1 "$@" "$f" >"$fp" ; vipreview "$fp" ; } ; }

# needed when used as an fzf viewer from ftl
((!FTLRC_LOADED)) && { : ${FTL_CFG:=$HOME/.config/ftl} ; source $FTL_CFG/etc/core/ftl_setup ; [[ "$1" ]] && pfzf "$1" ; }

# vim: set filetype=bash :

