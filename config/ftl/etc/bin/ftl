#!/bin/env bash

function stacktrace { 
   local i=1 line file func
   while read -r line func file < <(caller $i); do
      echo "[$i] $file:$line $func(): $(sed -n ${line}p $file)"
      ((i++))
   done
}

numfmt()
{
/usr/bin/numfmt "$@" || { echo "$@" >>nmfmt_log ; echo -e "------------------\n\n" >>nmfmt_log ; stacktrace >>nmfmt_log ; echo nmfmt: error "$@" >&2 ; }
}

ftl() # dir[/file], pfs, preview_ftl. © Nadim Khemir 2020-2023, Artistic licence 2.0
{
source $FTL_CFG/etc/core/ftl_setup
echo -en '\e[?1049h' ; stty -echo

[[ "$1" == '-s' ]] && { sel_read "$@" && shift 2 ; }
[[ "$1" == '-t' ]] && { tab_read "$@" && shift 2 ; }

[[ "$1" ]] && { [[ -d "$1" ]] && { dir="$1" ; search='' ; } || { [[ -f "$1" ]] && { path "$1" ; dir="${p}" ; search="$f" ; } ; } || { echo ftl: \'$1\', no such path ; exit 1 ; } ; }
[[ "$2" ]] && { fs=$2/$$ ; pfs=$2 ; mkdir -p $fs ; touch $fs/history ; } || { fs=$ftl_root/$$ ; pfs=$fs ; main=1 ; mkdir -p $fs/prev ; echo $my_pane >$fs/pane ; }
fsp=$pfs/prev ; PPWD="$dir" 

[[ "$3" ]] && { gpreview=1 ; prev_all=0 ; emode=0 ; cd "$dir" ; prev_synch ; true ; } || { tag_synch ; cdir "$dir" "$search" ; }

ftl_main_info_file="$(mktemp -p $fs ftl_main_info_XXXXXXX)" ; setup_finfo "$ftl_main_info_file" ;

while : ; do tag_synch ; winch ; time_event ; { [[ "$R" ]] && { REPLY="${R:0:1}" ; R="${R:1}" ; } || get_key $KEY_TIMEOUT ; } && try key_command ; kbdf ; winch=1 ; REPLY= ; done
}

cdir() { inotify_k ; get_dir "$@" ; ((lines = nfiles > LINES - 1 ? LINES - 1 : nfiles, center = lines / 2)) ; sleep 0.02 ; ((qd)) || refresh ; list "${3:-$found}" ; true ; }

get_dir() # dir, search
{
cd "${1:-$PWD}" || return ; [[ "$PPWD" != "$PWD" ]] && { hist_save ; marks["'"]="$n" ; PPWD="$PWD" ; }

tabs[$tab]="$PWD" ; inotify_s ; ((etag)) && etag_dir ; [[ "$PWD" == / ]] && sep= || sep=/ ; shopt -s nocasematch ; geo_prev

((gpreview)) || nice -15 $pgen/generator $thumbs &

files=() ; files_color=() ; mime=() ; nfiles=0 ; search="${2:-$([[ "${dir_file[${tab}_$PPWD]}" ]] || echo "$find_auto")}" ; found= ; s_type=$sort_type0 ; s_reversed=$sort_reversed0
[[ -f .ftlrc_dir ]] && source .ftlrc_dir ; s_type=${sort_type[tab]:-$s_type} ; [[ "${reversed[tab]}" == "-r" ]] && s_reversed=-r || { [[ "${reversed[tab]}" == "0" ]] && s_reversed= ; }

ftl_cols=$COLS

declare -A uniq_file ; shopt -s dotglob ; pad=(* ? ?) ; shopt -u dotglob ; pad=${#pad[@]} ; pad=${#pad} ; line=0 ; sum=0 ; first_file= ; local LANG=C LC_ALL=C ; v_entries ; dir &

while : ; do read -s -u 4 pnc ; [ $? -gt 128 ] && break ; read -s -u 5 pc ; read -s -u 6 size
	[[ "$pnc" == "$dir_done" ]] && break ; ((${uniq_file[$pnc]})) && continue ; uniq_file[$pnc]=1 ; pl=${#pnc}
	
	[[ -f "$pnc" ]] && # extension filtering
		{
		if [[ "$pnc" =~ '.' ]]
		then
			e=${pnc##*.}
			((lignore[${tab}_${e@Q}] || lignore[${e@Q}])) && continue
			((${#lkeep_tab[$tab]})) && { ((lkeep_tab[${tab}_${e@Q}])) || continue ; }
			((${#lkeep[@]})) && { ((lkeep[${e@Q}])) || continue ; }
		else
			((${#lkeep[@]} || ${#lkeep_tab[$tab]})) && continue
		fi
		}
	
	((quick_display && nfiles > 0 && 0 == nfiles % quick_display)) && { echo -e "\e[H\e[31m$nfiles\e[0m" ; qd=1 ; }
	
	# color directory not accessible
	[[ -d "$pnc" && ! -x "$pnc" ]] && pc="\e[31m$pnc"
	
	((etag)) && { etag_tag "$pnc" external_tag external_tag_length ; pc="$external_tag$pc" ; ((pl+=external_tag_length)) ; }
	((sum += size)) ; ((show_size)) && { ((pl += 5)) ; [[ -d "$pnc" ]] && { ((show_size > 1)) && pc="$(dir_size "$pnc") $pc" || pc="     $pc" ; true ; } \
			 || { for u in '' K M G T ; do ((size < 1024)) && printf -v pc "\e[94m%4s\e[m $pc" $size$u && break ; ((size/=1024)) ; done  ; } ; }
	((show_line)) && { ((line++)) ; printf -v pc "$line_color%${pad}d\e[m¿${pc/\%/%%}" $line ; ((pl += $pad + 1)) ; }
	
	pcl=${pc:0:(( ${#pc} == $pl ? ($COLS - 1) : ( (${#pc} - 4) - $pl ) + ($COLS - 1) )) }
	((pl > (COLS - 1))) && { [[ "$pnc" =~ '.' ]] && e=${pnc##*.} || e= ; pcl=${pcl:0:((${#pcl}-(${#e}+1)))}…${e} ; }
	files_color[$nfiles]="$pcl" ; files[$nfiles]="$PWD$sep$pnc"
	
	[[ -f "$pnc" ]] && [[ -z $first_file ]] && first_file=$nfiles
	[[ -n "$search" && -z "$found" ]] && [[ "${pnc:0:${#search}}" == "$search" ]] && found=$nfiles ; ((nfiles++))
done

shopt -u nocasematch ; qd=0 ; ((show_size || gpreview)) && hsum=$(numfmt --to=iec --format ' %4f' "$sum") || hsum=
}

list() # select_index
{
# [[ $ftl_cols != $COLS ]] && { echo width missmatch ; cdir ; return ; }

[[ "$1" ]] && dir_file[${tab}_$PWD]="$1" ; file=${dir_file[${tab}_$PWD]:-0}
((file = file > nfiles - 1 ? nfiles - 1 : file)) ; ((nfiles)) && path "${files[file]}" || path_none ; ((gpreview)) || save_state $fs ; selection ; geo_winch
((top = nfiles < lines || file <= center ? 0 : file >= nfiles - center ? nfiles - lines : file - center, bottom = top + lines - 1, bottom = bottom < 0 ? 0 : bottom)) ; l=0

head="${lglyph[lmode[tab]]}${iglyph[vmode[tab]]}${pdir_only[tab]}${montage}" ; head=${head:+$head }
((ntabs>1)) && tabsd=' ᵗ'$((tab+1)) || tabsd= ; 
((nfiles)) && { ((qd)) || ((flipi^=1)) ; flip="${flips[$flipi]}" ; } || { head="\e[33m∅  $head$ftag$tabsd" ; header '' "$head" ; tcpreview ; clear_list 0 ; return ; }
((show_stat)) && stat="$(stat -c ' %A %U' "${files[file]}") $(stat -c %s "${files[file]}" | numfmt --to=iec --format '%4f')" || stat= ;
((s_type == 2 && show_date)) && date=$(find "${files[file]}" -maxdepth 0 -printf ' %Tx-%TH:%TM') || date=
[[ "$to_search" ]] && search_h="S:$to_search " || search_h=
head="$head$ftag$(printf "%${pad}d" $((file+1)))/${nfiles}$hsum$stat$date$tabsd$flip$search_h" ; header '' "$head"

for((i=$top ; i <= bottom ; i++))
	do
		cursor=${tags[${files[$i]}]:- } ; [[ $i == $file ]] && cursor="${cursor_color}$cursor\e[m"
		echo -ne "\e[m\e[K$cursor${files_color[i]/¿/$flip}" ; ((i != bottom)) && echo ; ((l++))
	done

((l < LINES - 1)) && echo ; clear_list $i ; ((qd || gpreview)) || { preview ; geo_winch ; }
}

preview() { ((prev_all)) && local_preview || { ((! main)) && remote_preview ; } ; }
local_preview() { ((emode)) && { ext_viewers ; emode=0 ; } || { pviewers ; extmode=0 ; } ; true ; }
remote_preview() { pane_read ; save_state ; echo "$fs" >$fsp/fs ; echo $my_pane >$fsp/pane ; tmux send -t $main_pane 'Ä' &>/dev/null ; true ; }

setup_finfo()
{
[[ -n "$1" ]] && ftl_info_file="$1" || ftl_info_file="$(mktemp -p $fs ftl_info_XXXXXXX)"

export ftl_info_file
ftl_env+=([ftl_info_file]=$ftl_info_file) ; 

{ FTL_PID=$$ ; FTL_FS=$fs ; FTL_PWD=${PWD@Q} ; declare -p FTL_PID FTL_FS FTL_PWD n selection ; } >$ftl_info_file
}

[[ $TMUX ]] && { : ${FTL_CFG:=$HOME/.config/ftl} ; ftl "$@" ; } || echo 'ftl: run me in tmux'

