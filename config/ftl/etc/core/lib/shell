shell_command()
{
[[ "$1" == 0 ]] && { return 1 ; }
[[ "$1" =~ ^[1-9][0-9]*$ ]] && { file="${files[(($1 - 1))]}"  ; [[ -d "$file" ]] && cdir "$file" || list $(($1 - 1)) ; return 1 ; }

# commands can be implemented here or in files found in "user_commands"

[[ "$1" == "load_tags" ]] && \
	{
	# eg: select all files in a directory: fd -a . > $ftl_root/load_tags 
	[[ -s "$fs/load_tags" ]] \
		&& { <"$fs/load_tags" readarray -t new_tags && tags=() && for p in "${new_tags[@]}" ; do tags["$p"]='â–ª' ; done ; } \
		|| tmux popup "echo -n ftl: no such file '$fs/load_tags'"

	return
	}

# command or shortcut bound to command
[[ "${kbd_trie[$1]}" ]] && R=${kbd_trie[$1]} && return ;
[[  ${C[$1]} ]] && R=${C[$1]} && return

# split command and serialize ftl information
eval "$($FTL_CFG/etc/bin/parse_parts "$1")" 
cmd="$cmd_parts"

export ftl_info_file="$(mktemp -p $fs ftl_info_XXXXXXX)"
{ FTL_PID=$$ ; FTL_FS=$fs ; FTL_PWD=${PWD@Q} ; declare -p FTL_PID FTL_FS FTL_PWD n selection ; } >$ftl_info_file

# user command

user_cmd="$FTL_CFG/commands/$cmd"
[[ -f  "$user_cmd" ]] && 
	{
	[[ ! -x "$user_cmd" ]] && { source "$user_cmd" "${cmd_parts[@]:1}" ; true ; } || { "$user_cmd" "${cmd_parts[@]:1}" ; } 
	return
	}

# shell command

((session_shell)) || { tmux new -A -d -s ftl$$ ; tmux neww -t ftl$$ -n ftl$$_bash ; sleep 0.2 ; session_shell=1 ; }

[[ "$cmd_parts" == fsh ]] &&
	{ fsh "$(printf "%s " "${cmd_parts[@]:1}")" ; true ; } ||
	{
		{
		echo "export ftl_info_file=$ftl_info_file"
		echo "cd '$PWD'"
		echo "echo -e '\e[2;33m[$(date -R)] $PWD\n\e[0;33mftl> $@ \e[m'"
		echo "echo -e \"\e[33m[$(date -R)] $PWD\n\e[33mftl> $@ \e[m\" >>$fs/cmd_log"
		echo "${cmd_parts[@]}"
		echo "exit_code=\$?"
		echo "echo -e \"\e[33mexit code: \$exit_code\e[m\n\" >>$fs/cmd_log"
		echo "echo -e \"\n\e[2;33mexit code: \$exit_code\e[m\""
		} >$fs/bash_command && tmux send -t ftl$$:ftl$$_bash ". $fs/bash_command" Enter
	}
}

# vim: set filetype=bash :

