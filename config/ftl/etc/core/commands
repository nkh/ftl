source "$FTL_CFG/etc/core/lib/shell"

goto_next_tag()		{ (( ${#tags[@]} )) && { [[ -z $ctag ]] && ctag=0 || ((ctag++)) ; (( ctag >= ${#tags[@]} )) && ctag=0 ; tag_go $ctag ; } ; }
goto_prev_tag()		{ (( ${#tags[@]} )) && { [[ -z $ctag ]] && ctag=0 || ((ctag--)) ; (( ctag < 0 )) && ctag=$((${#tags[@]} - 1))  ; tag_go $ctag ; } ; }

goto_entry()		{ line_color="$line_color_hi" ; cdir ; line_color="$line_color0" ; prompt 'to: ' ; [[ "$REPLY" ]] && shell_command "$REPLY" || cdir ; }
hexedit()		{ tcpreview ; ctsplit "$HEXEDIT ${n@Q}" ; }
vim_edit()		{ tcpreview ; "$EDITOR" "$n" ; }
ftl_help()		{ ((help_pop)) && { tmux popup -h90% -w90% -E "$help_command" ; } || { tcpreview ; exec 2>&9 ; $help_command ; exec 2>"$fs/log" ; } ; cdir ; }
move_left()		{ [[ "$PWD" != / ]]  && { nd="${PWD%/*}" ; cdir "${nd:-/}" "$(basename "$p")"; } ; }
move_left_arrow()	{ move_left ; }
move_down()		{ ((nfiles)) && { move 1 && list ; } ; }
move_down_arrow()	{ move_down ; }
move_up()		{ ((nfiles)) && { move -1 && list ; } ; }
move_up_arrow()		{ move_up ; }
move_right()		{ ((nfiles)) && [[ -d "${files[file]}" ]] && cdir "${files[file]}" ; }
move_right_arrow()	{ move_right ; }
move_down_step()	{ ((nfiles)) && { move $move_step && list ; } ; }
move_up_step()		{ ((nfiles)) && { move -$move_step && list ; } ; }
enter()			{ ((nfiles)) && { { [[ -f "${files[file]}" ]] && edit ; } || { [[ -d "${files[file]}" ]] && cdir "${files[file]}" ; } ; } ; }
move_page_up()		{ move -$LINES ; list ; }
move_page_down()	{ move $LINES ; list ; }
top_file_bottom()	{ twd="${tab}_$PWD" ; [[ -f "$n" ]] && { (($file == $nfiles - 1)) && dir_file[$twd]=0 || dir_file[$twd]=$nfiles ; } || dir_file[$twd]=$first_file ; list ; }
goto_first_directory()	{ twd="${tab}_$PWD" ; (($nfiles)) && dir_file[$twd]=0 ; list ; }
goto_first_file()	{ twd="${tab}_$PWD" ; (($nfiles)) && dir_file[$twd]=$first_file ; list ; }
goto_last_file()	{ twd="${tab}_$PWD" ; (($nfiles)) && dir_file[$twd]=$nfiles ; list ; }
goto_high_file()	{ twd="${tab}_$PWD" ; dir_file[$twd]=$top ; list ; }
goto_low_file()		{ twd="${tab}_$PWD" ; dir_file[$twd]=$bottom ; list ; }
move_percent()	        { twd="${tab}_$PWD" ; (($nfiles)) && dir_file[$twd]=$(($nfiles * $COUNT / 100)) ; list ; }
goto_alt1()		{ to_search=".$e" ; R="${C[find_next]}" ; }
goto_alt2()		{ for ((i=file + 1 ; i != $nfiles ; i++)) ; do [[ ! "${files[i]##*/}" =~ ".$e" ]] && { list $i ; return ; } ; done ; list ; }
preview_down()		{ ((in_viprev)) && tmux send -t $pane_id C-D || [[ $pane_id ]] && tmux send -t $pane_id j ; }
preview_up()		{ ((in_viprev)) && tmux send -t $pane_id C-U || [[ $pane_id ]] && tmux send -t $pane_id k ; }
selection_class_1()	{ selection_class_c 1 ; }
selection_class_2()	{ selection_class_c 2 ; }
selection_class_3()	{ selection_class_c 3 ; }
selection_class_4()	{ selection_class_c 4 ; }
selection_class_c()	{ for ((i=0 ; i < ${COUNT:-1} && file < nfiles ; i++)) ; do pdhn "$file/$nfiles $n" ; selection_class_n $1 ; move 1 ; file=$nf ; done ; ((stagsi++)) ; list ; }
selection_class_n()	{ [[ ${tags[${files[file]}]} == ${tglyph[$1]} ]] && unset -v "tags[${files[file]}]" || tags[${files[file]}]=${tglyph[$1]} ; }
change_dir()		{ prompt 'cd: ' ; [[ -n $REPLY ]] && cdir "${REPLY/\~/$HOME}" || list ; }
chmod_ar()		{ for i in "${selection[@]}" ; do [[ -r "$i" ]] && mode=a-r || mode=a+r ; chmod $mode "$i" ; done ; cdir ; }
chmod_aw()		{ for i in "${selection[@]}" ; do [[ -w "$i" ]] && mode=a-w || mode=a+w ; chmod $mode "$i" ; done ; cdir ; }
chmod_ax()		{ for i in "${selection[@]}" ; do [[ -x "$i" ]] && mode=a-x || mode=a+x ; chmod $mode "$i" ; done ; cdir ; }
chmod_dialog()		{ tcpreview ; exec 2>&9 ; "$FTL_CFG/etc/bin/scim_permission" "${selection[@]}" ; exec 2>"$fs/log" ; }
clear_filters()		{ filters_dir[tab]='.' ; filters[tab]='.' ; filters2[tab]='.' ; rfilters[tab]="$rfilter0" ; ntfilter[tab]= ; filter_rst ; ftag= ; cdir ; }
command_prompt()	{ gcn ; echo -ne "\e[H" ; tput cnorm ; stty echo ; C="$(cmd_prompt)" ; stty -echo ; tput civis ; [[ "$C" ]] && header '' "$head" && shell_command "$C" ; list ; }
gcn()			{ { find "$FTL_CFG/commands" -type f -printf "%f\n" ; printf "%s\n" "${!C[@]}" fsh finfo show_cmd_log ; } >$fs/command_names ; }
copy()			{ prompt 'write to: ' && [[ $REPLY ]] && { tag_check && cp_mv_tags p "$REPLY" || cp_mv p "$REPLY" "${selection[@]}" ; } ; cdir ; }
copy_clipboard()	{ printf "%q " "${selection[@]}" | xsel -b -i ; }
add_selection_to_file()	{ prompt 'add selection to: ' && [[ $REPLY ]] && { printf "%q\n" "${selection[@]}" >> "$REPLY" ; }  ; cdir ; }
create_bulk()		{ B=$fs/BULK ; >$B ; $EDITOR $B && { grep '/$' "$B" | tr '\n' '\0' | xargs -0 mkdir -p ; create_bulk_files "$B"; } ; cdir ; }
create_bulk_files()	{ grep -v '/$' "$1" | tr '\n' '\0' | xargs -0 dirname -z | xargs -0 mkdir -p ; grep -v '/$' "$1" | sed -e '/^$/d' | tr '\n' '\0' | xargs -0 touch ; }
create_dir()		{ prompt 'mkdir: ' && [[ "$REPLY" ]] && mkdir -p "$PWD/$REPLY" && cdir "$PWD/$REPLY" || list ; }
create_file()		{ prompt 'touch: ' && [[ "$REPLY" ]] && touch "$PWD/$REPLY" ; cdir "$PWD" "$REPLY" ; }
delete_selection()	{ tag_check && { delete_tag ; true ; } || delete 'delete ?' 'true' "${selection[@]}" ; cdir ; }
depth()			{ prompt 'depth: ' && [ "$REPLY" -eq "$REPLY" ] 2>&- && { max_depth[tab]=$REPLY && cdir '' "$f" ; } || list ; }
editor_detach()		{ ((in_viprev)) && in_viprev= && pane_id= && cdir ; }
external_mode1()	{ emode=1 ; preview ; }
external_mode2()	{ emode=2 ; preview ; }
external_mode3()	{ emode=3 ; preview ; }
file_dir_mode()		{ ((lmode[tab]++)) ; ((lmode[tab] > 2)) && lmode[tab]=0 ; cdir '' "$f" ; }
set_filter()		{ prompt "filter: " -i "${filters[tab]}" ; filters[tab]="${REPLY:-.}" ; ftag="~" ; cdir '' "$f" ; }
set_filter_dir()	{ prompt "filter dir: " -i "${filters_dir[tab]}" ; filters_dir[tab]="${REPLY:-.}" ; ftag="~" ; cdir '' "$f" ; }
set_filter2()		{ prompt "filter2: " -i "${filters2[tab]}" ; filters2[tab]="${REPLY:-.}" ; ftag="~" ; cdir '' "$f" ; }
set_filter_ext()	{ p="$FTL_CFG/filters" ; filter_ext=$(cd "$p" ; fd | fzf-tmux -p 50% --cycle) ; [[ $filter_ext ]] && . "$p/$filter_ext" ; cdir '' "$f"; }
set_filter_only_tagged(){ p="$FTL_CFG/filters" ; filter_ext=by_only_tagged ; . "$p/$filter_ext" ; cdir '' "$f"; }
set_filter_reverse()	{ prompt "rfilter: " -i "${rfilters[tab]}" ; rfilters[tab]="$REPLY" ; ftag="~" ; cdir '' "$f" ; }
find_entry()		{ prompt "find: " -i to_search ; R="${C[find_next]}" ; }
find_next()		{ for ((i=file + 1 ; i != $nfiles ; i++)) ; do [[ "${files[i]##*/}" =~ "$to_search" ]] && { list $i ; return ; } ; done ; list ; }
find_previous()		{ for ((i=file - 1 ; i != -1 ; i--)) ; do [[ "${files[i]##*/}" =~ "$to_search" ]] && { list $i ; return ; } ; done ; list ; }
find_fzf()		{ exec 2>&9 ; tcpreview ; go_loop fzf "$({ fd -HI -d1 -td | sort ; fd -HI -d1 -tf -tl | sort ; } | sed 's/^.\///' | fzf_vvip -m $fzfp_opt)" ; exec 2>"$fs/log" ; }
find_fzf_all()		{ exec 2>&9 ; tcpreview ; go_loop fzf "$(fd -HI -E'.git/*' | sed 's/^.\///' | fzf_vvip -m $fzfp_opt)" ; exec 2>"$fs/log" ; }
find_fzf_dirs()		{ exec 2>&9 ; tcpreview ; go_loop fzf "$(fd -td -I -L | sed 's/^.\///' | fzf_vvip -m $fzfp_opt)" ; exec 2>"$fs/log" ; }
find_frf()		{ exec 2>&9 ; tcpreview ; go_loop fzf "$(frf 1000 '' ctrl-t)" ; exec 2>"$fs/log" ; }
gmark()			{ { cat $ftl_root/marks 2>&- ; [[ -d "$n" ]] && echo "$n/\$" || echo "$n" ; } | awk '!seen[$0]++' | sponge $ftl_root/marks ; }
gmark_fzf()		{ [[ -e $ftl_root/marks ]] && go_loop f fzf "$(cat $ftl_root/marks | lscolors | fzf-tmux $fzf_opt --cycle -m --expect=ctrl-t --ansi)" ; }
gmarks_clear()		{ prompt 'clear persistent marks? [y|N]' -sn1 && [[ $REPLY == y ]] && :>$ftl_root/marks ; list ; }
go_rg()			{ exec 2>&9 ; tcpreview ; go_loop rg "$(fzfr "fzf--expect=ctrl-t")" ; exec 2>"$fs/log" ; }
history_go()		{ h=$fs/history ; dedup $h && go_loop f fzf "$(<$h lscolors | fzf-tmux $fzf_opt --tac --ansi --expect=ctrl-t)" ; }
ghistory()		{ h=$ghist ; dedup $h && go_loop f fzf "$(<$h lscolors | fzf-tmux $fzf_opt --tac --ansi --expect=ctrl-t)" ; }
ghistory_delete()	{ prompt 'clear global history? [y|N]' -sn1 && [[ $REPLY == y ]] && rm $ghist 2>&- ; list ; }
ghistory_edit()		{ dedup $ghist && rg -v -x -F -f <(<$ghist lscolors | fzf-tmux $fzf_opt --tac -m --ansi) $ghist | sponge $ghist ; }
image_fzf()		{ exec 2>&9 ; tcpreview ; go_loop f fzf "$(fzfi --expect=ctrl-t -q "$(echo "$ifilter" | perl -pe 's/(^|\|)/ $1 ./g')")" ; exec 2>"$fs/log" ; }
image_zoom()		{ ((FTLI_Z ^= 1)) ; list ; }
link()			{ tag_check && prompt "Link (${#tags[@]})? [y|N]" -sn1 ; [[ $REPLY == y ]] && tags_clear && for f in "${selection[@]}" ; do ln -s -b "$f" . ; done ; cdir ; }
follow_link()		{ [[ -L "$n" ]] && cdir "$(dirname $(realpath "$n"))"  "$(basename $(realpath "$n"))" ; }
mark()			{ read -sn1 ; [[ -n $REPLY ]] && { [[ -d  "${files[file]}" ]] && marks[$REPLY]="${files[file]}/$" || marks[$REPLY]="${files[file]}" ; } ; }
mark_fzf()		{ go_loop f fzf "$(printf "%s\n" "${marks[@]}" | sort -u | lscolors | fzf-tmux $fzf_opt -m --expect=ctrl-t --ansi)" ; }
mark_go()		{ read -n 1 ; [[ $REPLY && -n ${marks[$REPLY]} ]] && { d="$(dirname "${marks[$REPLY]}")" ; cdir "$d" "$(basename "${marks[$REPLY]}")" ; } || list ; }
mark_go_tab()		{ read -n 1 ; [[ $REPLY && -n ${marks[$REPLY]} ]] && { d="$(dirname "${marks[$REPLY]}")" ; _tab_new ; cdir "$d" "$(basename "${marks[$REPLY]}")" ; } || list ; }
preview_refresh()	{ [[ -d "$n" ]] && { rm "$ftl_root/montage/$n/montage.jpg" 2>&- ; true ; } || { $pgen/generator_one "$thumbs" "$n" "$e" ; } ; pw3image FTL_RESTART_W3M ; list ; }
montage_preview()	{ [[ "$montage" ]] && montage= || montage="â ¶" ; list ; }
player_kill()		{ player_k ; }
pane_down()		{ pane_extra "-v" "" ; }
pane_left()		{ pane_extra "-h -b" '' ; }
pane_right()		{ pane_ftl "'$n' $pfs" "-h -b" -R ; [[ "$n" ]] && rdir "$n" ; echo -e "\e[H\e[K" ; header '2' "$head" ; }
pane_R()		{ pane_extra "" "" ; }
pane_L()		{ pane_extra "-h -b" "-R" ; }
pane_go_next()		{ p=$(pane_next) ; [[ $p ]] && { echo -e "\e[H\e[K" ; header '2' "$head" ; } && tmux selectp -t $p &>/dev/null && tmux send -t $p ${C[refresh_pane]} ; }
preview_pane()		{ ((prev_all ^= 1)) ; tcpreview ; sleep 0.05 ; cdir ; }
preview_dir_only()	{ [[ "${pdir_only[tab]}" ]] && pdir_only[tab]= || pdir_only[tab]='á´°' ; list ; }
preview_ext_ign()	{ [[ $e ]] && { ((pignore[${e}] ^= 1)) ; cdir ; } ; }
preview_image()		{ ((no_image_preview ^= 1)) ; for e in $(tr '|' ' ' <<< "$ifilter") ; do pignore[${e}]=$no_image_preview ; done ; cdir ; } 
extension_hide_tab()	{ [[ $e ]] && ((lignore[${tab}_${e}]= 1)) ; cdir ; }
extension_hide()	{ [[ $e ]] && ((lignore[${e}]= 1)) ; cdir ; }
extension_clear()	{ lignore=() ; cdir ; }
view_mode_pdf()		{ ((pdf_prev_image ^= 1)) ; list ; }
preview_lock_clr()	{ rm "$fs/lock_preview/$n" 2>&- ; list ; }
preview_lock()		{ p="$FTL_CFG/etc/core/lib/lock_preview" ; file=$(cd $p ; fd | fzf-tmux $fzf_opt) ; [[ $file ]] && . $p/$file ; list ; }
preview_m1()		{ extmode=1 ; list ; }
preview_m2()		{ extmode=2 ; list ; }
preview_queue()		{ [[ $e =~ $mfilter ]] && { ($Q_PLAYER "${selection[@]}" & ) ; tags_clear ; list ; } ; }
preview_show()		{ [[ $e =~ $mfilter ]] && { source $B_PLAYER "${selection[@]}" ; tags_clear ; list ; } ; }
preview_show_fzf()	{ p="$FTL_CFG/viewers" ; viewer=$(cd $p 2>&- && fd | fzf-tmux -p80% --cycle --reverse --info=inline) ; [[ $viewer ]] && source $p/$viewer ; list ; }
preview_size()		{ ((zoom += 1, zoom >= ${#zooms[@]})) && zoom=0 ; zoom ; [[ $pane_id ]] && tmux resizep -t $pane_id -x $x &>/dev/null ; rdir '' 0 ; }
preview_tail()		{ [[ "${tail[$n]}" == "+$ " ]] && tail[$n]='+0 ' || tail[$n]='+$ ' ; list ; }
quit_ftl()		{ tab_close || pane_close || quit ; }
quit_all()		{ ((main)) && { pane_send "${C[quit_ftl]}" ; sleep 0.05 ; in_Q=1 ; quit ; } || tmux send -t $main_pane ${C[quit_all]}  ; }
quit_keep_shell()	{ keep_shell=1 ; quit_all ; }
quit_keep_preview()	{ quit2 ; [[ $pane_id ]] && { echo >$pfs/pane ; tmux selectp -t $pane_id ; tmux resizep -Z -t $pane_id ; } ; exit 0 ; }
ftl_event_quit()	{ : ; }
refresh_pane()		{ ((nfiles)) && path "${files[file]}" || f= ; tag_check ; cdir "$PWD" "$f" ; } # directory content change signal
rename()		{ tcpreview ; printf "%s\n" "${selection[@]}" | edir && tags_clear && cdir '' "$f" ; }
shell()			{ { [[ "$shell_id" ]] && $(tmux has -t $shell_id 2>&-) ; } || shell_pane ; tmux selectp -t $shell_id &>/dev/null ; }
shell_files()		{ { [[ "$shell_id" ]] && $(tmux has -t $shell_id 2>&-) ; } && R=${C[shell_file]} || shell_pane 1 ; tmux selectp -t $shell_id &>/dev/null ; }
shell_send_files()	{ for i in "${selection[@]}" ; do shell_send 1 "'$i'" " " ; done ; }
shell_view()		{ ((session_shell)) || { tmux new -A -d -s ftl$$ ; tmux neww -t ftl$$ -n ftl$$_bash ; sleep 0.2 ; session_shell=1 ; } ; tmux switch -t ftl$$:ftl$$_bash ; }
shell_synch()		{ shell_send 1 "cd '$p'" C-m ; }
shell_zoomed()		{ { [[ $shell_id ]] && $(tmux has -t $shell_id 2>&-) ; } || shell_pane ; tmux selectp -t $shell_id &>/dev/null ; tmux resizep -Z -t $shell_id &>/dev/null ; }
show_hidden()		{ ((show_hidden[tab])) && show_hidden[tab]= || show_hidden[tab]=1 ; cdir '' "$f" ; }
show_size()		{ ((show_size++, show_size = show_size > 3 ? 0 : show_size)) ; ((show_size == 3)) && { header '' "$msg_du" ; dir_dusize ; header '' "$head" ; } ; cdir ; }
show_stat()		{ ((show_stat ^= 1)) ; refresh ; list ; }
sort_entries()		{ ((sort_type[tab] = sort_type[tab] + 1 >= ${#sort_filters[@]} ? 0 : sort_type[tab] + 1)) ; cdir '' "$f" ; }
sort_entries_reversed()	{ [[ ${reversed[tab]} == '-r' ]] && reversed[tab]=0 || reversed[tab]=-r ; cdir '' "$f"; }
tab_new()		{ [[ -d "$f" ]] && _tab_new "$n" || _tab_new "$PWD" ; cdir "${tabs[tab]}" ; }
tab_next()		{ ctab=$tab ; _tab_next ; ((tab != ctab)) && cdir "${tabs[tab]}" '' "${dir_file[${tab}_${tabs[tab]}]}" ; }
tab_prev()		{ ctab=$tab ; _tab_prev ; ((tab != ctab)) && cdir "${tabs[tab]}" '' "${dir_file[${tab}_${tabs[tab]}]}" ; }
tab_goto()		{ ((ntab = $COUNT - 1)) ; ((ntab != tab)) && [[ -n "${tabs[ntab]}" ]] && tab=ntab && cdir "${tabs[tab]}" '' "${dir_file[${tab}_${tabs[tab]}]}" ; }
select_all_directories(){ for p in "${files[@]}" ; do [[ -d "$p" ]] && [[ ! ${tags[$p]} ]] && tags["$p"]='âª' && tags_size + "$p" ; done ; list ; }
select_all_files()	{ for p in "${files[@]}" ; do [[ -f "$p" ]] && [[ ! ${tags[$p ]} ]] && tags["$p"]='âª' && tags_size + "$p" ; done ; list ; }
select_all()		{ for p in "${files[@]}" ; do [[ ! ${tags[$p]} ]] && tags["$p"]='âª' &&  tags_size + "$p" ; done ; list ; }
tag_copy()		{ tag_check && cp_mv_tags $REPLY "$PWD" ; cdir '' "$f"; }
tag_move_to()		{ fzf_mv "${selection[@]}" && tags_clear ; cdir '' "$f"; }
tag_move()		{ tag_check && cp_mv_tags $REPLY "$PWD" ; cdir '' "$f"; }
view_mode_all()		{ vmode[tab]=0 ; tfilters[tab]= ; ntfilter[tab]= ; cdir '' "$f"; }
view_mode_image()	{ vmode[tab]=1 ; ntfilter[tab]= ; tfilters[tab]="$ifilter$" ; cdir '' "$f"; }
view_mode_not_image()	{ vmode[tab]=2 ; tfilters[tab]="$ifilter$" ; ntfilter[tab]='-v' ; cdir '' "$f"; }
view_mode_next()	{ ((vmode[tab]++)) ; ((vmode[tab] > 2)) && vmode[tab]=0 ; view_mode ${vmode[tab]} ; }
view_mode()		{ [[ $1 == 0 ]] && view_mode_all ; [[ $1 == 1 ]] && view_mode_image ; [[ $1 == 2 ]] && view_mode_not_image ; }
selection_flip_down()	{ for ((i=file ; i < file + ${COUNT:-1} && i < nfiles ; i++)) ; do tag_flip "${files[i]}" ; done ; move ${COUNT:-1} ; list ; }
selection_flip_up()	{ tag_flip "${files[file]}" ; move -1 ; list ; }
selection_fzf()		{ fzf_tag T "$(fd -H --color=always -d1 | fzf-tmux $fzf_opt -m --ansi --marker 'âª')" ; list ; }
selection_fzf_all()	{ fzf_tag T "$(fd -H --color=always | fzf-tmux $fzf_opt -m --ansi --marker 'âª')" ; list ; }
selection_goto()	{ tag_check && go_loop f fzf "$(printf "%s\n" "${!tags[@]}" | sort -u | lscolors | fzf-tmux $fzf_opt --tac --ansi --expect=ctrl-t)" ; }
selection_merge()	{ p="$FTL_CFG/etc/core/lib/merge" ; file=$(cd $p 2>&- && fd | fzf-tmux --header 'Merge tags:' $fzf_opt) ; [[ $file ]] && . $p/$file ; cdir ; }
selection_merge_all()	{ source "$FTL_CFG/etc/core/lib/merge/all" ; list ; }
selection_untag_all()	{ tags_clear ; list ; }
selection_untag_fzf()	{ tag_check && { fzf_tag U "$(printf "%s\n" "${!tags[@]}" | lscolors | fzf-tmux $fzf_opt -m --ansi --marker 'â')" ; list ; } ; }
etag_show()		{ ((etag^=1)) ; cdir ; }
etag_select()		{ p="$FTL_CFG/etags" ; { etag_s=$(cd $p ; fd | fzf-tmux -p 50% --cycle --reverse --info=inline) ; [[ $etag_s ]] && { . $p/$etag_s $fs ; etag=1 ; cdir ; } ; } ; }
SIG_PANE()		{ pane_read ; ((${#panes[@]})) && tmux selectp -t ${panes[0]} || tmux selectp -t $my_pane ; ofs= ; R=${C[refresh_pane]} ; }
SIG_REFRESH()		{ ((gpreview)) && kbdf && prev_synch ; }
SIG_REMOTE()		{ ((prev_all)) && { read op <$fsp/pane ; prev_synch prev ; tmux selectp -t $op ; kbdf ; } ; }
SIG_SYNCH_SHELL()	{ IFS=$'\n' read -r shell_dir <$pfs/synch_with_shell ; cdir "$shell_dir" ; }


# vim: set filetype=bash :
